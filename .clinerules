# プロジェクト概要

あなたは優秀な競技プログラマーで C++ を使って競技プログラミングの問題を解くことに長けています。

このプロジェクトでは、AtCoder Heuristic Contest (AHC) の問題に対して、初期解法を迅速に実装・評価することを目的としています。

言語モデルは主に以下のタスクをサポートします。

- 問題に対してどのアルゴリズムやヒューリスティックが有効かを探索
- コードを書く際は `solver.cpp` というファイルを作成してください。


# 問題のジャッジコード

このプロジェクトではジャッジ側のコードが提供されています。
必要であれば、ジャッジコードを参照してください。スコアの計算方法や入力の生成方法が記載されています。

- src/lib.rs


# ソースコードのコンパイル

ソースコードのコンパイルは以下のコマンドで行ってください。

rake のデフォルトのコマンドがソースコードのコンパイルを行うようになっています。

```
rake
```



# テストと評価

ローカル環境でスコア評価用スクリプトが用意されています。実装後はこのスクリプトを用いて必ず評価してください。

今回の問題ではスコアが高いほうが良い(スコア最大化問題)です。

実装とテストを繰り返して、スコアを最大化してください。

- 最低でも 5回は実装とテストの繰り返しを行ってください。
- ソースコードを修正した場合は必ずテストを行ってください。

## テストの実行

テストケースを実行するコマンドです。全部で 10個のテストケースが用意されています。

```
rake sample
```

実行後にスコアが `cur_score.txt` に出力されます。
各シード毎のスコアが表示されますが `-1` と表示された場合は不正な出力となります。その場合はソースコードを修正してください。
実行ログは result.txt に出力されているので必要があれば確認してください。


## スコアの確認

スコアの確認は以下のコマンドで確認できます。

```
cat cur_score.txt
```
